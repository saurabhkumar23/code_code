-> leetcode - 300. Longest Increasing Subsequence

    public int LIS_rec(int[] nums, int ei){
        int maxLis = 1;
        for(int i = ei - 1; i >= 0; i--){
            if(nums[i] < nums[ei]){
                maxLis = Math.max(maxLis, LIS_rec(nums, i) + 1);
            }
        }
        return maxLis;
    }

    public int LIS_memo(int[] nums, int ei, int[] dp){
        int maxLis = 1;
        if(dp[ei] != 0){
            return dp[ei];
        }
        for(int i = ei - 1; i >= 0; i--){
            if(nums[i] < nums[ei]){
                maxLis = Math.max(maxLis, LIS_memo(nums, i, dp) + 1);
            }
        }
        return dp[ei] = maxLis;
    }
 
     public int LIS_tab(int[] nums, int IDX, int[] dp){
        for(int ei = 0; ei < dp.length; ei++){
            int maxLis = 1;
            for(int i = ei - 1; i >= 0; i--){
                if(nums[i] < nums[ei]){
                    maxLis = Math.max(maxLis, dp[i] + 1);
                }
            }
            dp[ei] = maxLis;
        }
        return dp[IDX];
    }
    
-> minimum deletions to make array sorted - just a random question - ans => arr.length - lis
    
-> concept - last thing is the view w.r.t to left...
             lis ( L - R ) -> 1, 5, 8, 10 = lis ending at 10.  
             lis ( R - L ) -> 10, 5, 2, 1 = lds starting at 10. 
             lds ( L - R ) -> 1, 5, 6, 10 = lds ending at 10. 
             lds ( R - L ) -> 10, 15, 88, 100 = lis starting at 10. 

-> longest bitonic subsequence - gfg

    public void lis_LR(int[] nums, int[] lis_dp){
        for(int i = 0; i < lis_dp.length; i++){
            int maxLen = 1;
            for(int ei = i - 1; ei >= 0; ei--){
                if(nums[ei] < nums[i]){
                    maxLen = Math.max(maxLen, lis_dp[ei] + 1);
                }
            }
            lis_dp[i] = maxLen;
        }
    }
    
    public void lis_RL(int[] nums, int[] lds_dp){
        for(int i = lds_dp.length - 1; i >= 0; i--){
            int maxLen = 1;
            for(int ei = i + 1; ei < lds_dp.length; ei++){
                if(nums[ei] < nums[i]){
                    maxLen = Math.max(maxLen, lds_dp[ei] + 1);
                }
            }
            lds_dp[i] = maxLen;
        }
    }
    
    
    public int LongestBitonicSequence(int[] nums)
    {
        // Code here
        int[] lis_dp = new int[nums.length];
        int[] lds_dp = new int[nums.length];
        lis_LR(nums, lis_dp);
        lis_RL(nums, lds_dp);

        int lbs = 1;
        for(int i = 0; i < lis_dp.length; i++){
            lbs = Math.max(lbs, lis_dp[i] + lds_dp[i] - 1);
        }
        return lbs;
    }
    
    // gfg - Maximum Sum Bitonic Subsequence  - just calculate sum instead of length in above question
    public static int LongestSumBitonicSequence(int[] nums)
    {
        int[] lis_dp = new int[nums.length];
        int[] lds_dp = new int[nums.length];
        lis_LR(nums, lis_dp);
        lis_RL(nums, lds_dp);
        int lsbs = 1;
        for(int i = 0; i < lis_dp.length; i++){
            lsbs = Math.max(lsbs, lis_dp[i] + lds_dp[i] - nums[i]);
        }
        return lsbs;
    }
             
-> Maximum Sum Increasing Subsequence - gfg

    public static void maxSumIS_tab(int[] arr, int[] dp){
	    for(int ei = 0; ei < dp.length; ei++){
            int maxLis = arr[ei];
            for(int i = ei - 1; i >= 0; i--){
                if(arr[i] < arr[ei]){
                    maxLis = Math.max(maxLis, dp[i] + arr[ei]);
                }
            }
            dp[ei] = maxLis;
        }
    }
    
-> leetcode - 673. Number of Longest Increasing Subsequence

    public int NLIS_tab(int[] nums, int[] dp, int[] cnt_dp){
        int maxLen = 0;
        int maxCnt = 0;
        for(int i = 0; i < dp.length; i++){
            int len = 1;
            int cnt = 1;
            for(int j = i - 1; j >= 0; j--){
                if(nums[j] < nums[i]){
                    if(dp[j] + 1 > len){
                        len = dp[j] + 1;
                        cnt = cnt_dp[j];
                    }
                    else if(dp[j] + 1 == len){
                        cnt += cnt_dp[j];
                    }
                }
            }
            dp[i] = len;
            cnt_dp[i] = cnt;
            if(len > maxLen){
                maxLen = len;
                maxCnt = cnt;
            }
            else if(len == maxLen){
                maxCnt += cnt;
            }
        }
        return maxCnt;
    }

-> Building Bridges ( gfg )
 
     // ek ko sort, dusre ka lis
     public static int maxmimumBridge(int[][] arr) {
        Arrays.sort(arr, (a, b) -> {
            return a[1] - b[1];
        });
        int n = arr.length, maxLen = 0;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
            for (int j = i - 1; j >= 0; j--) {
                if (arr[i][0] > arr[j][0] && arr[i][1] > arr[j][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            maxLen = Math.max(dp[i], maxLen);
        }
        return maxLen;
    }
    
-> leetcode - 354. Russian Doll Envelopes - same above question
