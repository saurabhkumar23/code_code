---> Question solving flow :

  -> think faith >> draw recursive tree >> write recursive code >> 
     do memoization >> observation >> do tabulation >> optimization ~sometimes
  -> first flow takes the almost time and the base of DP, second flow hardly takes 3 minutes.
  -> memoization or tabulation ? - always invest yourself in memoization. intuition never comes by tabulation. also memo to tab hardly takes 3 minutes via only small changes.
  -> tabulation ? - memoization is actual DP, but when if mujhe kuch pattern observe ho raha hai. ye to shayad me iteratively bhi kar sakta hu. that is tabulation.
  -> real life dp ? - cooking something new via Yt takes time only for the first time.
  -> dp says if you have already evaluation a solution to a problem then don't solve it again, just save that solution into some space and utilise it
  
 -> fibonacci 
 
    public static int fibo_rec(int n){
        if(n <= 1){
            return n;
        }
        int fib = fibo_rec(n-1) + fibo_rec(n-2);
        return fib;
    }
    
     public static int fibo_memo(int n,int[] dp){
        if(n <= 1){
            return dp[n] = n;
        }
        if(dp[n] != 0){
            return dp[n];
        }
        int fib = fibo_memo(n-1,dp) + fibo_memo(n-2,dp);
        return dp[n] = fib;
    }
    
     public static int fibo_tab(int N,int[] dp){
        for(int n = 0 ; n <= N ; n++){
            if(n <= 1){
                dp[n] = n;
                continue;
            }
            int fib = dp[n-1] + dp[n-2];
            dp[n] = fib;
        }
        return dp[N];
    }
    
 -> maze path ways
 
     public static int mazePathWays_rec(int[][] maze,int sr,int sc,int dr,int dc,int[][] dir){
        if(sr == dr && sc == dc){
            return 1;
        }
        int ways = 0;
        for(int i = 0 ; i < dir.length ; i++){
            int r = sr + dir[i][0];
            int c = sc + dir[i][1];
            if(r <= dr && c <= dc){
               ways += mazePathWays_rec(maze , r , c , dr , dc , dir);
            }
        }
        return ways;
    }

    public static int mazePathWays_memo(int[][] maze,int sr,int sc,int dr,int dc,int[][] dir,int[][] dp){
        if(sr == dr && sc == dc){
            return dp[sr][sc] = 1;
        }
        if(dp[sr][sc] != 0){
            return dp[sr][sc];
        }
        int ways = 0;
        for(int i = 0 ; i < dir.length ; i++){
            int r = sr + dir[i][0];
            int c = sc + dir[i][1];
            if(r <= dr && c <= dc){
               ways += mazePathWays_memo(maze , r , c , dr , dc , dir , dp);
            }
        }
        return dp[sr][sc] = ways;
    }

    public static int mazePathWays_tab(int[][] maze,int SR,int SC,int DR,int DC,int[][] dir,int[][] dp){
        for(int sr = DR ; sr >= SR ; sr--){
            for(int sc = DC ; sc >= SC ; sc--){
                if(sr == DR && sc == DC){
                    dp[sr][sc] = 1;
                    continue;
                }
                int ways = 0;
                for(int i = 0 ; i < dir.length ; i++){
                    int r = sr + dir[i][0];
                    int c = sc + dir[i][1];
                    if(r <= DR && c <= DC){
                        ways += dp[r][c];
                    }
                }
                dp[sr][sc] = ways;
            }
        }
        return dp[SR][SC];
    }
    
 -> maze path with jumps ways
 
     public static int mazePathJumpWays_rec(int[][] maze,int sr,int sc,int dr,int dc,int[][] dir){
        if(sr == dr && sc == dc){
            return 1;
        }
        int ways = 0;
        for(int i = 0 ; i < dir.length ; i++){
            int r = sr + dir[i][0];
            int c = sc + dir[i][1];
            while(r <= dr && c <= dc){
               ways += mazePathJumpWays_rec(maze , r , c , dr , dc , dir);
               r += dir[i][0];
               c += dir[i][1];
            }
        }
        return ways;
    }
    
    public static int mazePathJumpWays_memo(int[][] maze,int sr,int sc,int dr,int dc,int[][] dir,int[][] dp){
        if(sr == dr && sc == dc){
            return dp[sr][sc] = 1;
        }
        if(dp[sr][sc] != 0){
            return dp[sr][sc];
        }
        int ways = 0;
        for(int i = 0 ; i < dir.length ; i++){
            int r = sr + dir[i][0];
            int c = sc + dir[i][1];
            while(r <= dr && c <= dc){
               ways += mazePathJumpWays_memo(maze , r , c , dr , dc , dir , dp);
               r += dir[i][0];
               c += dir[i][1];
            }
        }
        return dp[sr][sc] = ways;
    }
    
    public static int mazePathJumpWays_tab(int[][] maze,int SR,int SC,int DR,int DC,int[][] dir,int[][] dp){
        for(int sr = DR ; sr >= SR ; sr--){
            for(int sc = DC ; sc >= SC ; sc--){
                if(sr == DR && sc == DC){
                    dp[sr][sc] = 1;
                    continue;
                }
                int ways = 0;
                for(int i = 0 ; i < dir.length ; i++){
                    int r = sr + dir[i][0];
                    int c = sc + dir[i][1];
                    while(r <= DR && c <= DC){
                        ways += dp[r][c];
                        r += dir[i][0];
                        c += dir[i][1];
                    }
                }
                dp[sr][sc] = ways;
            }
        }
        return dp[SR][SC];
    }
 
-> climb 3 stairs ways

    public static int climb3StairsWays_rec(int n){
        if(n == 0){
            return 1;
        }
        int ways = 0;
        for(int i = 1 ; i <= 3 ; i++){
            if(n - i >= 0){
                ways += climb3StairsWays_rec(n-i);
            }
        }
        return ways;
    }
    
    public static int boardPath_memo(int sp, int ep, int[] dp) {
        if (sp == ep) {
            return dp[sp] = 1;
        }

        if (dp[sp] != 0)
            return dp[sp];

        int count = 0;
        for (int dice = 1; dice <= 6 && sp + dice <= ep; dice++) {
            count += boardPath_memo(sp + dice, ep, dp);
        }

        return dp[sp] = count;
    }
    
    public static int climb3StairsWays_memo(int n,int[] dp){
        if(n == 0){
            return dp[n] = 1;
        }
        if(dp[n] != 0){
            return dp[n];
        }
        int ways = 0;
        for(int i = 1 ; i <= 3 ; i++){
            if(n - i >= 0){
                ways += climb3StairsWays_memo(n-i,dp);
            }
        }
        return dp[n] = ways;
    }
    
    public static int climb3StairsWays_tab(int N,int[] dp){
        for(int n = 0 ; n <= N ; n++){
            if(n == 0){
                dp[n] = 1;
                continue;
            }
            int ways = 0;
            for(int i = 1 ; i <= 3 ; i++){
                if(n - i >= 0){
                    ways += dp[n-i];
                }
            }
            dp[n] = ways;
        }
        return dp[N];
    }
    
 -> decode ways ( leetcode 91)
 
     public static int numDecodings_rec(String s,int idx){
        if(idx == s.length()){
            return 1;
        }
        char ch1 = s.charAt(idx);
        int n1 = ch1 - '0';
        int ways = 0;
        if(n1 > 0){
            ways += numDecodings_rec(s,idx + 1);
            if(idx < s.length() - 1){
                char ch2 = s.charAt(idx + 1);
                int n2 = ch2 - '0';
                n2 = (n1 * 10) + n2;
                if(n2 <= 26){
                    ways += numDecodings_rec(s,idx + 2);
                }
            }
        }
        return ways;
    }
    
    public static int numDecodings_memo(String s,int idx,int[] dp){
        if(idx == s.length()){
            return dp[idx] = 1;
        }
        if(dp[idx] != -1){
            return dp[idx];
        }
        char ch1 = s.charAt(idx);
        int n1 = ch1 - '0';
        int ways = 0;
        if(n1 > 0){
            ways += numDecodings_memo(s,idx + 1,dp);
            if(idx < s.length() - 1){
                char ch2 = s.charAt(idx + 1);
                int n2 = ch2 - '0';
                n2 = (n1 * 10) + n2;
                if(n2 <= 26){
                    ways += numDecodings_memo(s,idx + 2,dp);
                }
            }
        }
        return dp[idx] = ways;
    }
    
    public static int numDecodings_tab(String s,int IDX,int[] dp){
        for(int idx = s.length() ; idx >= 0 ; idx--){
            if(idx == s.length()){
                dp[idx] = 1;
                continue;
            }
            char ch1 = s.charAt(idx);
            int n1 = ch1 - '0';
            int ways = 0;
            if(n1 > 0){
                ways += dp[idx + 1];
                if(idx < s.length() - 1){
                    char ch2 = s.charAt(idx + 1);
                    int n2 = ch2 - '0';
                    n2 = (n1 * 10) + n2;
                    if(n2 <= 26){
                        ways += dp[idx + 2];
                    }
                }
            }
            dp[idx] = ways;
        }
        return dp[IDX];
    }
    
     
    public static int numDecodings_tab_opti(String s){
        int a = 0, b = 0;
        for(int idx = s.length() ; idx >= 0 ; idx--){
            if(idx == s.length()){
                a = 1;
                continue;
            }
            char ch1 = s.charAt(idx);
            int n1 = ch1 - '0';
            int ways = 0;
            if(n1 > 0){
                ways += a;
                if(idx < s.length() - 1){
                    char ch2 = s.charAt(idx + 1);
                    int n2 = ch2 - '0';
                    n2 = (n1 * 10) + n2;
                    if(n2 <= 26){
                        ways += b;
                    }
                }
            }
            b = a;
            a = ways;
        }
        return a;
    }
  
-> Decode Ways II ( leetcode 639 )

    static int mod = (int) 1e9 + 7;
    public static long numDecod2_rec(String s,int idx){
        if(idx == s.length()){
            return 1;
        }
        char ch1 = s.charAt(idx);
        if(ch1 == '0'){
            return 0;
        }
        long ways = 0;
        if(ch1 == '*'){
            ways = (ways + 9 * numDecod2_rec(s,idx + 1)) % mod;
            if(idx < s.length() - 1){
                char ch2 = s.charAt(idx + 1);
                if(ch2 >= '0' && ch2 <= '6'){
                    ways = (ways + 2 * numDecod2_rec(s,idx + 2)) % mod;
                }
                else if(ch2 >= '7' && ch2 <= '9'){
                    ways = (ways + 1 * numDecod2_rec(s,idx + 2)) % mod;
                }
                else{
                    ways = (ways + 15 * numDecod2_rec(s,idx + 2)) % mod;
                }
            }
        }
        else{
            ways = (ways + 1 * numDecod2_rec(s,idx + 1)) % mod;
            if(idx < s.length() - 1){
                char ch2 = s.charAt(idx + 1);
                if(ch2 == '*' && ch1 == '1'){
                    ways = (ways + 9 * numDecod2_rec(s,idx + 2)) % mod;
                }
                else if(ch2 == '*' && ch1 == '2'){
                    ways = (ways + 6 * numDecod2_rec(s,idx + 2)) % mod;
                }
                else{
                    int num = ((ch1 - '0') * 10 + (ch2 - '0'));
                    if(num <= 26){
                        ways = (ways + 1 * numDecod2_rec(s,idx + 2)) % mod;
                    }
                }
            }
        }
        return ways;
    }
    
    public static long numDecod2_memo(String s,int idx,long[] dp){
        if(idx == s.length()){
            return dp[idx] = 1;
        }
        if(dp[idx] != -1){
            return dp[idx];
        }
        char ch1 = s.charAt(idx);
        if(ch1 == '0'){
            return dp[idx] = 0;
        }
        long ways = 0;
        if(ch1 == '*'){
            ways = (ways + 9 * numDecod2_memo(s,idx + 1,dp)) % mod;
            if(idx < s.length() - 1){
                char ch2 = s.charAt(idx + 1);
                if(ch2 >= '0' && ch2 <= '6'){
                    ways = (ways + 2 * numDecod2_memo(s,idx + 2,dp)) % mod;
                }
                else if(ch2 >= '7' && ch2 <= '9'){
                    ways = (ways + 1 * numDecod2_memo(s,idx + 2,dp)) % mod;
                }
                else{
                    ways = (ways + 15 * numDecod2_memo(s,idx + 2,dp)) % mod;
                }
            }
        }
        else{
            ways = (ways + 1 * numDecod2_memo(s,idx + 1,dp)) % mod;
            if(idx < s.length() - 1){
                char ch2 = s.charAt(idx + 1);
                if(ch2 == '*' && ch1 == '1'){
                    ways = (ways + 9 * numDecod2_memo(s,idx + 2,dp)) % mod;
                }
                else if(ch2 == '*' && ch1 == '2'){
                    ways = (ways + 6 * numDecod2_memo(s,idx + 2,dp)) % mod;
                }
                else if(ch2 != '*'){
                    int num = ((ch1 - '0') * 10 + (ch2 - '0'));
                    if(num <= 26){
                        ways = (ways + 1 * numDecod2_memo(s,idx + 2,dp)) % mod;
                    }
                }
            }
        }
        return dp[idx] = ways;
    }
    
    public static long numDecod2_tab(String s,int IDX,long[] dp){
        for(int  idx = s.length() ; idx >= 0 ; idx--){
            if(idx == s.length()){
                dp[idx] = 1;
                continue;
            }
            char ch1 = s.charAt(idx);
            if(ch1 == '0'){
                dp[idx] = 0;
                continue;
            }
            long ways = 0;
            if(ch1 == '*'){
                ways = (ways + 9 * dp[idx + 1]) % mod;
                if(idx < s.length() - 1){
                    char ch2 = s.charAt(idx + 1);
                    if(ch2 >= '0' && ch2 <= '6'){
                        ways = (ways + 2 * dp[idx + 2]) % mod;
                    }
                    else if(ch2 >= '7' && ch2 <= '9'){
                        ways = (ways + 1 * dp[idx + 2]) % mod;
                    }
                    else{
                        ways = (ways + 15 * dp[idx + 2]) % mod;
                    }
                }
            }
            else{
                ways = (ways + 1 * dp[idx + 1]) % mod;
                if(idx < s.length() - 1){
                    char ch2 = s.charAt(idx + 1);
                    if(ch2 == '*' && ch1 == '1'){
                        ways = (ways + 9 * dp[idx + 2]) % mod;
                    }
                    else if(ch2 == '*' && ch1 == '2'){
                        ways = (ways + 6 * dp[idx + 2]) % mod;
                    }
                    else if(ch2 != '*'){
                        int num = ((ch1 - '0') * 10 + (ch2 - '0'));
                        if(num <= 26){
                            ways = (ways + 1 * dp[idx + 2]) % mod;
                        }
                    }
                }
            }
            dp[idx] = ways;
        }
        return dp[IDX];
    }
    
    public static long numDecod2_tab_opti(String s){
        long a = 0;
        long b = 0;
        for(int  idx = s.length() ; idx >= 0 ; idx--){
            if(idx == s.length()){
                a = 1;
                continue;
            }
            char ch1 = s.charAt(idx);
            if(ch1 == '0'){
                b = a;
                a = 0;
                continue;
            }
            long ways = 0;
            if(ch1 == '*'){
                ways = (ways + 9 * a) % mod;
                if(idx < s.length() - 1){
                    char ch2 = s.charAt(idx + 1);
                    if(ch2 >= '0' && ch2 <= '6'){
                        ways = (ways + 2 * b) % mod;
                    }
                    else if(ch2 >= '7' && ch2 <= '9'){
                        ways = (ways + 1 * b) % mod;
                    }
                    else{
                        ways = (ways + 15 * b) % mod;
                    }
                }
            }
            else{
                ways = (ways + 1 * a) % mod;
                if(idx < s.length() - 1){
                    char ch2 = s.charAt(idx + 1);
                    if(ch2 == '*' && ch1 == '1'){
                        ways = (ways + 9 * b) % mod;
                    }
                    else if(ch2 == '*' && ch1 == '2'){
                        ways = (ways + 6 * b) % mod;
                    }
                    else if(ch2 != '*'){
                        int num = ((ch1 - '0') * 10 + (ch2 - '0'));
                        if(num <= 26){
                            ways = (ways + 1 * b) % mod;
                        }
                    }
                }
            }
            b = a;
            a = ways;
        }
        return a;
    }
 
 -> Gold Mine
 
     public static int goldMine_rec(int[][] mine,int r,int c,int[][] dir){
        if(c == mine[0].length - 1){
            return mine[r][c];
        }
        int max_gold_so_far = 0;
        for(int i = 0; i < dir.length; i++){
            int nr = r + dir[i][0];
            int nc = c + dir[i][1];
            if(nr >= 0 && nr < mine.length){
                int gold = goldMine_rec(mine,nr,nc,dir);
                max_gold_so_far = Math.max(max_gold_so_far,gold);
            }
        }
        return max_gold_so_far + mine[r][c];
    }
    
    public static int goldMine_memo(int[][] mine,int r,int c,int[][] dir,int[][] dp){
        if(c == mine[0].length - 1){
            return dp[r][c] = mine[r][c];
        }
        if(dp[r][c] != -1){
            return dp[r][c];
        }
        int max_gold_so_far = 0;
        for(int i = 0; i < dir.length; i++){
            int nr = r + dir[i][0];
            int nc = c + dir[i][1];
            if(nr >= 0 && nr < mine.length){
                int gold = goldMine_memo(mine,nr,nc,dir,dp);
                max_gold_so_far = Math.max(max_gold_so_far,gold);
            }
        }
        return dp[r][c] = (max_gold_so_far + mine[r][c]);
    }
    
    public static int goldMine_tab(int[][] mine,int R,int C,int[][] dir,int[][] dp){
        for(int c = mine[0].length - 1 ; c >= 0 ; c--){
            for(int r = 0 ; r < mine.length ; r++){
                if(c == mine[0].length - 1){
                    dp[r][c] = mine[r][c];
                    continue;
                }
                int max_gold_so_far = 0;
                for(int i = 0; i < dir.length; i++){
                    int nr = r + dir[i][0];
                    int nc = c + dir[i][1];
                    if(nr >= 0 && nr < mine.length){
                        int gold = dp[nr][nc];
                        max_gold_so_far = Math.max(max_gold_so_far,gold);
                    }
                }
                dp[r][c] = (max_gold_so_far + mine[r][c]);
            }
        }
        return dp[R][C];
    }
