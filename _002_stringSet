-> longest palindromic subsequence

    public static int lps_rec(String s, int i,int j){
        if(i >= j){
            return i == j ? 1 : 0;
        }
        int local_lcs = 0;
        if(s.charAt(i) == s.charAt(j)){
            local_lcs = lps_rec(s, i + 1, j - 1);
            local_lcs += 2;
        }
        else{
            int lps1 = lps_rec(s, i + 1, j);
            int lps2 = lps_rec(s, i, j - 1);
            local_lcs = Math.max(lps1, lps2);
            
        }
        return local_lcs;
    }
    
    public static int lps_memo(String s, int i,int j, int[][] dp){
        if(i >= j){
            return dp[i][j] = (i == j ? 1 : 0);
        }
        int local_lcs = 0;
        if(s.charAt(i) == s.charAt(j)){
            local_lcs = lps_memo(s, i + 1, j - 1,dp);
            local_lcs += 2;
        }
        else{
            int lps1 = lps_memo(s, i + 1, j,dp);
            int lps2 = lps_memo(s, i, j - 1,dp);
            local_lcs = Math.max(lps1, lps2);
            
        }
        return dp[i][j] = local_lcs;
    }
    
    public static int lps_tab(String s, int I,int J, int[][] dp){
        for(int gap = 0; gap < dp.length; gap++){
            for(int i = 0, j = gap; j < dp[0].length; j++ , i++){
                if(i >= j){
                    dp[i][j] = (i == j ? 1 : 0);
                    continue;
                }
                int local_lcs = 0;
                if(s.charAt(i) == s.charAt(j)){
                    local_lcs = dp[i + 1][j - 1]; 
                    local_lcs += 2;
                }
                else{
                    int lps1 = dp[i + 1][j]; 
                    int lps2 = dp[i][j - 1]; 
                    local_lcs = Math.max(lps1, lps2);
                    
                }
                dp[i][j] = local_lcs;
            }
        }
        return dp[I][J];
    }
    
-> longest common subsequence

    public static int lcs_rec(String s1, String s2, int l1, int l2){
        if(l1 == 0 || l2 == 0){
            return 0;
        }
        int local_lcs = 0;
        if(s1.charAt(l1 - 1) == s2.charAt(l2 - 1)){
            local_lcs = lcs_rec(s1,s2,l1 - 1,l2 - 1) + 1;
        }
        else{
            int lcs1 = lcs_rec(s1,s2,l1 - 1,l2);
            int lcs2 = lcs_rec(s1,s2,l1,l2 - 1);
            local_lcs = Math.max(lcs1, lcs2);
        }
        return local_lcs;
    }
    
    public static int lcs_memo(String s1, String s2, int l1, int l2, int[][] dp){
        if(l1 == 0 || l2 == 0){
            return dp[l1][l2] = 0;
        }
        if(dp[l1][l2] != -1){
            return dp[l1][l2];
        }
        int local_lcs = 0;
        if(s1.charAt(l1 - 1) == s2.charAt(l2 - 1)){
            local_lcs = lcs_memo(s1,s2,l1 - 1,l2 - 1,dp) + 1;
        }
        else{
            int lcs1 = lcs_memo(s1,s2,l1 - 1,l2,dp);
            int lcs2 = lcs_memo(s1,s2,l1,l2 - 1,dp);
            local_lcs = Math.max(lcs1, lcs2);
        }
        return dp[l1][l2] = local_lcs;
    }
    
    public static int lcs_tab(String s1, String s2, int L1, int L2, int[][] dp){
        for(int l1 = 0; l1 < dp.length; l1++){
            for(int l2 = 0; l2 < dp[0].length; l2++){
                 if(l1 == 0 || l2 == 0){
                    dp[l1][l2] = 0;
                    continue;
                }
                int local_lcs = 0;
                if(s1.charAt(l1 - 1) == s2.charAt(l2 - 1)){
                    local_lcs = dp[l1 - 1][l2 - 1] + 1;
                }
                else{
                    int lcs1 = dp[l1 - 1][l2];
                    int lcs2 = dp[l1][l2 - 1];
                    local_lcs = Math.max(lcs1, lcs2);
                }
                dp[l1][l2] = local_lcs;
            }
        }
        return dp[L1][L2];
    }
    
    // leetcode question based on application of lcs -> 583. Delete Operation for Two Strings
    public static int minDeletions(String word1, String word2){
        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
        for(int[] d : dp){
            Arrays.fill(d, -1);
        }
        return word1.length() + word2.length() - 2 * lcs_tab(word1, word2, word1.length(), word2,length(), dp);
    }
    
    public static int maxUncrossedLines_rec(int[] nums1, int[] nums2, int l1, int l2){
        if(l1 == 0 || l2 == 0){
            return 0;
        }
        if(nums1[l1 - 1] == nums2[l2 - 1]){
            return maxUncrossedLines_rec(nums1, nums2, l1 - 1, l2 - 1) + 1;
        }
        else{
            int ans1 = maxUncrossedLines_rec(nums1, nums2, l1 - 1, l2);
            int ans2 = maxUncrossedLines_rec(nums1, nums2, l1, l2 - 1);
            return Math.max(ans1, ans2);
        }
    }
    
 -> Distinct Subsequences
 
     public static int distinctSubsequences_rec(String s, String t, int l1, int l2){
        if(l1 < l2){
            return 0;
        }
        if(l2 == 0){
            return 1;
        }
        int local_ds = 0;
        if(s.charAt(l1 - 1) == t.charAt(l2 - 1)){
            int ds1 = distinctSubsequences_rec(s, t, l1 - 1, l2 - 1);
            int ds2 = distinctSubsequences_rec(s, t, l1 - 1, l2);
            local_ds = ds1 + ds2;
        }
        else{
            local_ds = distinctSubsequences_rec(s, t, l1 - 1, l2);
        }
        return local_ds;
    }
    
    public static int distinctSubsequences_memo(String s, String t, int l1, int l2, int[][] dp){
        if(l1 < l2){
            return dp[l1][l2] = 0;
        }
        if(l2 == 0){
            return dp[l1][l2] = 1;
        }
        if(dp[l1][l2] != -1){
            return dp[l1][l2];
        }
        int local_ds = 0;
        if(s.charAt(l1 - 1) == t.charAt(l2 - 1)){
            int ds1 = distinctSubsequences_memo(s, t, l1 - 1, l2 - 1, dp);
            int ds2 = distinctSubsequences_memo(s, t, l1 - 1, l2, dp);
            local_ds = ds1 + ds2;
        }
        else{
            local_ds = distinctSubsequences_memo(s, t, l1 - 1, l2, dp);
        }
        return dp[l1][l2] = local_ds;
    }
    
    public static int distinctSubsequences_tab(String s, String t, int L1, int L2, int[][] dp){
        for(int l1 = 0; l1 < dp.length; l1++){
            for(int l2 = 0; l2 < dp[0].length; l2++){
                if(l1 < l2){
                    dp[l1][l2] = 0;
                    continue;
                }
                if(l2 == 0){
                    dp[l1][l2] = 1;
                    continue;
                }
                int local_ds = 0;
                if(s.charAt(l1 - 1) == t.charAt(l2 - 1)){
                    int ds1 = dp[l1 - 1][l2 -1]; 
                    int ds2 = dp[l1 - 1][l2]; 
                    local_ds = ds1 + ds2;
                }
                else{
                    local_ds = dp[l1 - 1][l2]; 
                }
                dp[l1][l2] = local_ds;
            }
        }
        return dp[L1][L2];
    }

-> edit Distance ( leetcode )

   public static int editDistance_rec(String s1, String s2, int l1, int l2){
       if(l1 == 0 || l2 == 0){
           return l1 == 0 ? l2 : l1;
       }
       int res = 0;
       if(s1.charAt(l1 - 1) == s2.charAt(l2 - 1)){
           res = editDistance_rec(s1, s2, l1 - 1, l2 - 1);
       }
       else{
           int insert = editDistance_rec(s1, s2, l1, l2 - 1);
           int delete = editDistance_rec(s1, s2, l1 - 1, l2);
           int replace = editDistance_rec(s1, s2, l1 - 1, l2 - 1);
           res = Math.min(Math.min(insert,delete),replace) + 1;
       }
       return res;
   }
   
   public static int editDistance_memo(String s1, String s2, int l1, int l2, int[][] dp){
       if(l1 == 0 || l2 == 0){
           return dp[l1][l2] = (l1 == 0) ? l2 : l1;
       }
       if(dp[l1][l2] != -1){
           return dp[l1][l2];
       }
       int res = 0;
       if(s1.charAt(l1 - 1) == s2.charAt(l2 - 1)){
           res = editDistance_memo(s1, s2, l1 - 1, l2 - 1, dp);
       }
       else{
           int insert = editDistance_memo(s1, s2, l1, l2 - 1, dp);
           int delete = editDistance_memo(s1, s2, l1 - 1, l2, dp);
           int replace = editDistance_memo(s1, s2, l1 - 1, l2 - 1, dp);
           res = Math.min(Math.min(insert,delete),replace) + 1;
       }
       return dp[l1][l2] = res;
   }
   
   public static int editDistance_tab(String s1, String s2, int L1, int L2, int[][] dp){
       for(int l1 = 0; l1 < dp.length; l1++){
           for(int l2 = 0; l2 < dp[0].length; l2++){
               if(l1 == 0 || l2 == 0){
                    dp[l1][l2] = (l1 == 0) ? l2 : l1;
                    continue;
               }
               int res = 0;
               if(s1.charAt(l1 - 1) == s2.charAt(l2 - 1)){
                   res = dp[l1 - 1][l2 - 1];
               }
               else{
                   int insert = dp[l1][l2 - 1]; 
                   int delete = dp[l1 - 1][l2]; 
                   int replace = dp[l1 - 1][l2 - 1]; 
                   res = Math.min(Math.min(insert,delete),replace) + 1;
               }
                dp[l1][l2] = res;
           }
       }
       return dp[L1][L2];
   }

// ops - [ insert , delete , replace ]
    public static int editDistanceMinCost_rec(String s1, String s2, int l1, int l2, int[] cost){
       if(l1 == 0 || l2 == 0){
           return l1 == 0 ? l2 * cost[0] : l1 * cost[1];
       }
       int res = 0;
       if(s1.charAt(l1 - 1) == s2.charAt(l2 - 1)){
           res = editDistance_rec(s1, s2, l1 - 1, l2 - 1);
       }
       else{
           int insert = editDistanceMinCost_rec(s1, s2, l1, l2 - 1) + cost[0];
           int delete = editDistanceMinCost_rec(s1, s2, l1 - 1, l2) + cost[1];
           int replace = editDistanceMinCost_rec(s1, s2, l1 - 1, l2 - 1) + cost[2];
           res = Math.min(Math.min(insert,delete),replace);
       }
       return res;
   }
   
-> wildcard matching ( leetcode )

    public static String removeStars(String p){
        if(p.length() == 0){
            return p;
        }
        StringBuilder sb = new StringBuilder();
        sb.append(p.charAt(0));
        for(int i = 1; i < p.length(); i++){
            if(sb.charAt(sb.length() - 1) == '*' && p.charAt(i) == '*'){
                continue;
            }
            sb.append(p.charAt(i));
        }
        return sb.toString();
    }
    
    public static int wildcardMatching_rec(String s, String p, int l1, int l2){
        if(l1 == 0 || l2 == 0){
            if(l1 == 0 && l2 == 0){
                return 1;
            }
            else if(l2 == 1 && p.charAt(l2 - 1) == '*'){
                return 1;
            }
            else{
                return 0;
            }
        }
        char ch1 = s.charAt(l1 - 1);
        char ch2 = p.charAt(l2 - 1);
        if(ch1 == ch2 || ch2 == '?'){
            return wildcardMatching_rec(s, p, l1 - 1, l2 - 1);
        }
        else if(ch2 == '*'){
            boolean res = false;
            res = res || wildcardMatching_rec(s, p, l1 - 1, l2) == 1;
            res = res || wildcardMatching_rec(s, p, l1, l2 - 1) == 1;
            return res ? 1 : 0;
        }
        else{
            return 0;
        }
    }
    
    public static int wildcardMatching_memo(String s, String p, int l1, int l2, int[][] dp){
        if(l1 == 0 || l2 == 0){
            if(l1 == 0 && l2 == 0){
                return dp[l1][l2] = 1;
            }
            else if(l2 == 1 && p.charAt(l2 - 1) == '*'){
                return dp[l1][l2] = 1;
            }
            else{
                return dp[l1][l2] = 0;
            }
        }
        if(dp[l1][l2] != -1){
            return dp[l1][l2];
        }
        char ch1 = s.charAt(l1 - 1);
        char ch2 = p.charAt(l2 - 1);
        if(ch1 == ch2 || ch2 == '?'){
            return dp[l1][l2] = wildcardMatching_memo(s, p, l1 - 1, l2 - 1, dp);
        }
        else if(ch2 == '*'){
            boolean res = false;
            res = res || wildcardMatching_memo(s, p, l1 - 1, l2, dp) == 1;
            res = res || wildcardMatching_memo(s, p, l1, l2 - 1, dp) == 1;
            return dp[l1][l2] = res ? 1 : 0;
        }
        else{
            return dp[l1][l2] = 0;
        }
    }
   
    public static int wildcardMatching_tab(String s, String p, int L1, int L2, int[][] dp){
        for(int l1 = 0; l1 < dp.length; l1++){
            for(int l2 = 0; l2 < dp[0].length; l2++){
                if(l1 == 0 || l2 == 0){
                    if(l1 == 0 && l2 == 0){
                        dp[l1][l2] = 1;
                        continue;
                    }
                    else if(l2 == 1 && p.charAt(l2 - 1) == '*'){
                        dp[l1][l2] = 1;
                        continue;
                    }
                    else{
                        dp[l1][l2] = 0;
                        continue;
                    }
                }
                char ch1 = s.charAt(l1 - 1);
                char ch2 = p.charAt(l2 - 1);
                if(ch1 == ch2 || ch2 == '?'){
                    dp[l1][l2] = dp[l1 - 1][l2 - 1];
                }
                else if(ch2 == '*'){
                    boolean res = false;
                    res = res || dp[l1 - 1][l2] == 1;
                    res = res || dp[l1][l2 - 1] == 1;
                    dp[l1][l2] = res ? 1 : 0;
                }
                else{
                    dp[l1][l2] = 0;
                }
            }
        }
        return dp[L1][L2];
    }
    
 -> max dot product of 2 subsequences ( leetcode )
 
     public static int maximum(int... arr){
        int maxi = arr[0];
        for(int i = 1; i < arr.length; i++){
            maxi = Math.max(maxi, arr[i]);
        }
        return maxi;
    }
    
    public static int maxDotProdTwoSubseq_rec(int[] nums1, int[] nums2, int l1, int l2){
       if(l1 == 0 || l2 == 0){
            return -(int) 1e8;
        }
        int val = nums1[l1 - 1] * nums2[l2 - 1];
        int acceptBothNums = maxDotProdTwoSubseq_rec(nums1, nums2, l1 - 1, l2 - 1) + val;
        int a = maxDotProdTwoSubseq_rec(nums1, nums2, l1 - 1, l2);
        int b = maxDotProdTwoSubseq_rec(nums1, nums2, l1, l2 - 1);
        return maximum(val, acceptBothNums, a, b);
    }

-> longest palindromic substring ( leetcode )   -----> a direct tabulation problem...

    public static String longestPalindromeSubstring(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        int count = 0, MaxLen = 0, si = 0;
        for (int gap = 0; gap < n; gap++) {
            for (int i = 0, j = gap; j < n; i++, j++) {
                if (gap == 0)
                    dp[i][j] = true;
                else if (gap == 1 && s.charAt(i) == s.charAt(j))
                    dp[i][j] = true;
                else if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1] == true)
                    dp[i][j] = true;
                if(dp[i][j]){
                    count++;
                    if (j - i + 1 > MaxLen) {
                        MaxLen = j - i + 1;
                        si = i;
                    }
                }
            }
        }
        return s.substring(si, si + MaxLen);
    }
 
-> longest common substring ( gfg )   -----> a direct tabulation problem...

    public static int longestCommonSubstring(String s1, String s2, int[][] dp){
        int maxLen = -1;
        for(int l1 = 0; l1 < dp.length; l1++){
            for(int l2 = 0; l2 < dp[0].length; l2++){
                if(l1 == 0 || l2 == 0){
                    dp[l1][l2] = 0;
                    continue;
                }
                if(s1.charAt(l1 - 1) == s2.charAt(l2 - 1)){
                    dp[l1][l2] = dp[l1 - 1][l2 - 1] + 1;
                }
                maxLen = Math.max(maxLen, dp[l1][l2]);
            }
        }        
        return maxLen;
    }
    
